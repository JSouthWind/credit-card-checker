{"version":3,"sources":["helpers/numberConstructor.js","helpers/stringFunctions.js","helpers/trancateToCardType.js","helpers/validateCard.js","helpers/luhnCheck.js","components/index.jsx","App.js","serviceWorker.js","index.js"],"names":["numberConstructor","text","checkLength","numberObject","formattedNumber","type","valid","numberStr","arr","match","join","cleanInputText","findCardType","cardType","substring","getLengthOfCardNumber","trancateToCardType","replace","formatText","validateFirstNumbers","lengthValid","length","validateNumberLength","str","doubleNumbersSum","i","currentNumber","createNumber","luhnCheck","validateCard","oneNumber","ind","doubledChar","toString","Input","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","inputWrapper","styled","div","_templateObject","gradientWrap","_templateObject2","styledInput","input","_templateObject3","cardIcon","_templateObject4","errorMessage","p","_templateObject5","state","cardNumber","cursorStart","cursorEnd","inputRef","React","createRef","focusOnInput","bind","assertThisInitialized","handleChange","setCursor","reset","prevProps","current","setSelectionRange","selectionEnd","numberOfSpaces","focus","e","onBlur","insert","target","value","setState","selectionStart","_this2","react_default","a","createElement","className","ref","autocomplete","onChange","placeholder","onClick","lib_default","name","size","Component","GlobalStyle","createGlobalStyle","App_templateObject","App","appDiv","components","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a10bcf4d.chunk.js","sourcesContent":["import { cleanInputText, findCardType, trancateToCardType, formatText, validateCard } from './';\n\nexport function numberConstructor(text, checkLength) {\n  let numberObject = {\n    formattedNumber: '',\n    type: '',\n    valid: true\n  };\n  let numberStr = cleanInputText(text);\n  if (!numberStr) return numberObject;\n\n  numberObject.type = findCardType(numberStr);\n  numberStr = trancateToCardType(numberStr, numberObject.type);\n  numberObject.formattedNumber = formatText(numberStr);\n  numberObject.valid = validateCard(numberStr, numberObject.type, checkLength);\n\n  return numberObject;\n}","export function createNumber(oneNumber, ind) {\n  const doubledChar = ((ind % 2 === 1) ? +oneNumber * 2 : oneNumber).toString();\n  return doubledChar.length > 1 ?\n    +doubledChar[0] + (+doubledChar[1]) :\n    +doubledChar;\n}\n\nexport function validateFirstNumbers(numberStr) {\n  const match = numberStr.match(/^(4|34|37|51|55|6011|3$|5$|6$|60$|601$)/);\n  return !!match;\n}\n\nexport function validateNumberLength(numberStr, cardType) {\n  switch (cardType) {\n    case 'amex':\n      return numberStr.length === 15;\n    case 'visa':\n      return numberStr.length === 16 || numberStr.length === 13;\n    default:\n      return numberStr.length === 16;\n  }\n}\n\nexport function formatText(numberStr) {\n  return numberStr.replace(/.{4}(?=.)/g, '$& ');\n}\n\nexport function cleanInputText(text) {\n  const arr = text.match(/[0-9]/g);\n  return arr ? arr.join('') : '';\n}\n\nexport function getLengthOfCardNumber(cardType) {\n  return cardType === 'amex' ? 15 : 16;\n}\n\nexport function findCardType(numberStr) {\n\n  if (numberStr.match(/^4/) != null)\n    return \"visa\";\n\n  if (numberStr.match(/^5[15]/) != null)\n    return \"mastercard\";\n\n  if (numberStr.match(/^3[47]/) != null)\n    return \"amex\";\n\n  if (numberStr.match(/^6011/) != null)\n    return \"discover\";\n\n  return \"\";\n}\n","import { getLengthOfCardNumber } from './';\n\nexport function trancateToCardType(text, cardType) {\n  return text.substring(0, getLengthOfCardNumber(cardType));\n}","import { validateNumberLength, validateFirstNumbers } from './stringFunctions';\nimport { luhnCheck } from './luhnCheck';\n\nexport function validateCard(numberStr, cardType, checkLength) {\n  if (!validateFirstNumbers(numberStr)) return false;\n  const lengthValid = validateNumberLength(numberStr, cardType);\n  if (checkLength) return lengthValid;\n  if (lengthValid) return luhnCheck(numberStr);\n  return true;\n\n}","import { createNumber } from './';\n\nexport function luhnCheck(str) {\n  let doubleNumbersSum = 0;\n  for (let i = 0; i < str.length; i++) {\n    const currentNumber = str[str.length - 1 - i];\n    doubleNumbersSum += createNumber(currentNumber, i);\n  }\n  return doubleNumbersSum % 10 === 0;\n}","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport FontAwesome from 'react-fontawesome';\nimport { numberConstructor } from '../helpers';\n\nclass Input extends Component {\n\n  inputWrapper = styled.div`\n    width: 312px;\n    height: 80px;\n    position: relative;\n  `;\n\n  gradientWrap = styled.div`\n    position: relative;\n    background: linear-gradient(to right, #FE40F7, #07FDFD);\n    padding: 1px;\n    border-radius: 5px;\n    overflow: hidden;\n    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);\n    &.error {\n      background: linear-gradient(to right, #FE3F3F, #D2197D);\n    }\n  `;\n\n  styledInput = styled.input`\n    width: 290px;\n    height: 40px;\n    border-radius: 5px;\n    border: solid 0px grey;\n    font-size: 1.3rem;\n    color: #444;\n    overflow: hidden;\n    padding: 5px 10px;\n    &:focus {\n      outline: solid 1px rgba(7, 253, 253, 0.1);\n    }\n  `;\n\n  cardIcon = styled.div`\n    position: absolute;\n    right: 10px;\n    top: 10px;\n    z-index: 10;\n    color: #ccc;\n    background-color: white;\n    &.pointer {\n      cursor: pointer;\n    }\n  `;\n\n  errorMessage = styled.p`\n    color: #FE3F3F;\n    font-size: 0.825rem;\n    position: absolute;\n    left: 10px;\n    bottom: -10px;\n  `;\n\n  inputRef;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      cardNumber: numberConstructor(''),\n      cursorStart: 0,\n      cursorEnd: 0,\n    };\n    this.inputRef = React.createRef();\n    this.focusOnInput = this.focusOnInput.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.setCursor = this.setCursor.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n\n  componentDidMount() {\n    this.focusOnInput();\n  }\n\n  componentDidUpdate(prevProps) {\n   this.setCursor();\n  }\n\n  setCursor() {\n    if (this.state.cursorStart !== this.state.cursorEnd) {\n      this.inputRef.current.setSelectionRange(this.inputRef.current.selectionEnd, this.inputRef.current.selectionEnd);\n    } else {\n      const numberOfSpaces = this.state.cursorStart > 0 && (this.state.cursorStart % 5 === 0) ? 1 : 0;\n      this.inputRef.current.setSelectionRange(this.state.cursorStart + numberOfSpaces, this.state.cursorEnd + numberOfSpaces);\n    }\n  }\n\n  focusOnInput() {\n    this.inputRef.current.focus();\n  }\n\n  handleChange(e, onBlur) {\n    const insert = e.target.value.length - this.state.cardNumber.formattedNumber.length > 2;\n    this.setState({\n      cardNumber: numberConstructor(e.target.value, onBlur),\n      cursorStart: insert ? 1 : e.target.selectionStart,\n      cursorEnd: insert ? e.target.value.length : e.target.selectionEnd,\n    });\n  }\n\n  reset() {\n    if (!this.state.cardNumber.valid) {\n      this.focusOnInput();\n      this.setState({\n        cardNumber: numberConstructor(''),\n        cursorStart: 0,\n        cursorEnd: 0,\n      });\n    }\n  }\n\n  render() {\n    return <this.inputWrapper>\n      <this.gradientWrap className={this.state.cardNumber.valid ? '' : 'error'}>\n        <this.styledInput\n          ref={this.inputRef}\n          value={this.state.cardNumber.formattedNumber}\n          type='text'\n          autocomplete='off'\n          onChange={this.handleChange}\n          onBlur={(e) => this.handleChange(e, true)}\n          placeholder='0000 0000 0000 0000'\n        />\n        <this.cardIcon onClick={this.reset} className={this.state.cardNumber.valid ? '' : 'pointer'}>\n          <FontAwesome\n            name={this.state.cardNumber.valid ? 'cc-' + this.state.cardNumber.type : 'times-circle'}\n            size='2x'\n          />\n        </this.cardIcon>\n      </this.gradientWrap>\n      {!this.state.cardNumber.valid && <this.errorMessage>Invalid card number</this.errorMessage>}\n    </this.inputWrapper>;\n  }\n}\n\nexport default Input;\n","import React, { Component } from 'react';\nimport styled, { createGlobalStyle } from 'styled-components';\n\nimport Input from './components';\n\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    padding: 0;\n    font-family: \"Roboto\", sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    box-sizing: border-box;\n  }\n`;\nclass App extends Component {\n\n  appDiv = styled.div`\n    background-color: rgba(0,0,0,0.1);\n    width: 100vw;\n    height: 100vh;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  `;\n\n  render() {\n    return (\n      <this.appDiv>\n        <GlobalStyle />\n        <Input />\n      </this.appDiv>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}